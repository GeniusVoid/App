import { GoogleGenAI } from "@google/genai";
import type { CoverSettings, TypographySettings } from '../types';

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

export const generateCoverImage = async (settings: CoverSettings): Promise<string> => {
  try {
    const fullPrompt = settings.style && settings.style !== 'Default' 
      ? `${settings.style} style, ${settings.prompt}`
      : settings.prompt;
    
    const config: {
      numberOfImages: number;
      outputMimeType: 'image/png';
      aspectRatio: CoverSettings['aspectRatio'];
    } = {
      numberOfImages: 1,
      outputMimeType: 'image/png',
      aspectRatio: settings.aspectRatio,
    };

    const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: fullPrompt,
        config,
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      return `data:image/png;base64,${base64ImageBytes}`;
    }
    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Error generating cover image:", error);
    if (error instanceof Error) {
      throw new Error(`Image generation failed: ${error.message}`);
    }
    throw new Error("An unknown error occurred during image generation.");
  }
};

export const generateTypographyImage = async (settings: TypographySettings): Promise<string> => {
  try {
    const prompt = `Create a high-resolution, 4K, cinematic typography design for a webnovel titled "${settings.title}". The style should be ${settings.theme}. Incorporate elements like ${settings.elements}. The primary colors should be ${settings.colors}. The text should be the main focus, elegantly designed and easy to read. This is for a book cover title, set against a complementary, subtly detailed background.`;
    
    const response = await ai.models.generateImages({
        model: 'imagen-4.0-generate-001',
        prompt: prompt,
        config: {
          numberOfImages: 1,
          outputMimeType: 'image/png',
          aspectRatio: settings.aspectRatio,
        },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      return `data:image/png;base64,${base64ImageBytes}`;
    }
    throw new Error("No image was generated by the API.");
  } catch (error) {
    console.error("Error generating typography:", error);
    if (error instanceof Error) {
      throw new Error(`Typography generation failed: ${error.message}`);
    }
    throw new Error("An unknown error occurred during typography generation.");
  }
};